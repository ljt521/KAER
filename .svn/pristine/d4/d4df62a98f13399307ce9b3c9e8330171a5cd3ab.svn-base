<!--作者：莫岭红 功能：新建（编辑）讲课-->
<template>
  <div v-wechat-title="title" class="newIec">
    <div class="dy-top">
      <x-header class="x-header" slot="header" :left-options="{backText: ''}">{{title}}<a slot="right"
                                                                                          @click="goEssentialInfo()">完成</a>
      </x-header>
    </div>
    <div class="backgroundStyle">
      <datetime
        v-model="lectureInfoDto.lessonDate"
        title="日期"
        placeholder="请选择"></datetime>
      <x-input title="讲课名称" v-model="lectureInfoDto.lessonName" placeholder="请填写" :is-type="codeValue" text-align="right" required></x-input>
      <x-input title="术式类型" v-model="lectureInfoDto.operativeType" placeholder="请填写" :is-type="codeValue" text-align="right" required></x-input>
      <div-selector :tilteValue="'讲课场合'" :dictCode="'CH'"
                    v-on:listenSelect="(value) => {lectureInfoDto.lectureLocal  = value.code}"
                    :anyData="lectureInfoDto.lectureLocal"></div-selector>
      <x-input title="活动名称" v-model="lectureInfoDto.activityName" placeholder="请填写" :is-type="codeValue" required text-align="right"></x-input>
      <cell title="产品信息" >
      </cell>
      <div>
        <cell v-for="(item,i) of list" :key="i">
          <check-icon slot="icon" :value.sync="item['select']" type="plain" @click.native="getPlain(item)">
            {{item.value}}
          </check-icon>
          <template v-slot="value">
            <div class="new-select">
              <div-selector :placeholder="'请选择品牌'" :dictCode="'CPPP'" v-model="item['proData']"
                            v-on:listenSelect="(value) => {item['proData'] = value.code;item['select'] = true;getPlain(item);}"
                            :anyData="item.proData"></div-selector>
            </div>
          </template>
        </cell>
      </div>
    </div>
  </div>
</template>
<script>
  export default {
    name: 'NewIecture',
    data () {
      return {
        lectureInfoDto: {
          lessonDate: '', //日期
          lessonName: '', //讲课名称
          operativeType: '', //术式类型
          lectureLocal: '', //讲课场合
          activityName: '', //活动名称
          productInfo: [], //产品信息
        },
        title: '新建讲课',
        demo1: false,
        list: [],
        codeValue: function (value) {
          return {
            valid: value != '' || null,
          }
        }
      }
    },
    created () {
      if (this.$route.params.data) {
        this.lectureInfoDto.lessonDate = this.$route.params.data.lessonDate.slice(0, 10)
        this.lectureInfoDto.lessonName = this.$route.params.data.lessonName
        this.lectureInfoDto.operativeType = this.$route.params.data.operativeType
        this.lectureInfoDto.lectureLocal = this.$route.params.data.lectureLocal
        this.lectureInfoDto.activityName = this.$route.params.data.activityName
        this.lectureInfoDto.productInfo = JSON.parse(this.$route.params.data.productInfo)
        this.lectureInfoDto['id'] = this.$route.params.data.id
      }
    },
    mounted () {
      this.title = this.$route.params.title || this.$route.meta.title
      this.lectureInfoDto.customerId = this.$route.params.id
      this.$get('/api/dict-tables/search-with-list', {dictCode: 'CPXX'}).then((info) => {
        this.list = info.dictItems
        this.list.forEach(val => {
          let data = this.$route.params.data.product
          for (let i in data[0]) {
            if (val.code === data[0][i]) {
              val['select'] = true
              val['proData'] = data[1][i]
            }
          }
        })
      }).catch(error => {
        console.log(error)
      })
    },
    methods: {
      getPlain (e) {
        if (e.hasOwnProperty('proData')) {
          if (e.select && e.proData) {
            const obj = {}
            obj[e.code] = e.proData
            this.lectureInfoDto.productInfo.forEach((item, index) => {
              if (item[e.code]) {
                this.lectureInfoDto.productInfo.splice(index, 1)
              }
            })
            this.lectureInfoDto.productInfo.push(obj)
          } else {
            if (this.lectureInfoDto.productInfo.length > 0) {
              this.lectureInfoDto.productInfo.forEach((item, index) => {
                if (item[e.code]) {
                  this.lectureInfoDto.productInfo.splice(index, 1)
                }
              })
            }
          }
         } else {
           e.select = false
        }
        this.list = JSON.parse(JSON.stringify(this.list))
      },
      goEssentialInfo () {
        for(let key in this.lectureInfoDto) {
          switch (key) {
            case 'lessonDate':
              if(this.lectureInfoDto[key] == '' || null) {this.$vux.toast.text('日期不能为空', 'middle'); return;}
              break
            case 'lessonName':
              if(this.lectureInfoDto[key] == '' || null) {this.$vux.toast.text('讲课名称不能为空', 'middle'); return;}
              break
            case 'operativeType':
              if(this.lectureInfoDto[key] == '' || null) {this.$vux.toast.text('术式类型不能为空', 'middle'); return;}
              break
            case 'lectureLocal':
              if(this.lectureInfoDto[key] == '' || null) {this.$vux.toast.text('讲课场合不能为空', 'middle'); return;}
              break
            case 'activityName':
              if(this.lectureInfoDto[key] == '' || null) {this.$vux.toast.text('活动名称不能为空', 'middle'); return;}
              break
            case 'productInfo':
              if(this.lectureInfoDto[key].length == 0) {this.$vux.toast.text('产品信息不能为空', 'middle'); return;}
              break
          }
        }
        this.lectureInfoDto.productInfo = JSON.stringify(this.lectureInfoDto.productInfo)
        if (this.title === '编辑讲课') {
          this.$put('/api/lectureInfo', this.lectureInfoDto).then(info => {
            this.$vux.toast.text('编辑讲课成功', 'middle')
            this.$router.push(`/userInfo/${this.lectureInfoDto.customerId }/follow-details/${this.lectureInfoDto.customerId }`)
          }).catch(error => {
            this.$vux.toast.text('编辑讲课失败', 'middle')
          })
        } else if (this.title === '新建讲课') {
          this.$post('/api/lectureInfo', this.lectureInfoDto).then(info => {
            this.$vux.toast.text('新建讲课成功', 'middle')
            this.$router.push(`/userInfo/${this.lectureInfoDto.customerId }/follow-details/${this.lectureInfoDto.customerId }`)
          }).catch(error => {
            this.$vux.toast.text('新建讲课失败', 'middle')
          })
        }
      }
    },
    beforeRouteLeave (to, from, next) {
      if (!to.params.id) {
        to.params.title = '全部讲课信息'
        to.params.id = this.lectureInfoDto.customerId
      }
      next()
    },

  }
</script>
<style lang="less">
  .newIec {
    .dy-top {
      .vux-header.x-header {
        h1.vux-header-title {
          font-size: 19px;
        }
        .vux-header-right {
          font-size: 15px;
        }
      }
    }
    .cellBox {
      height: 20px;
    }
    .backgroundStyle {
      font-size: 13px;
    }
  }

  .new-select {
    height: 0;
    position: relative;
    top: -20px;
  }
  .weui-label{
    width: 80px !important;
  }

  .weui-icon-success-circle {
    font-size: 18px;
  }
  .weui-icon-circle {
    font-size: 18px;
  }
</style>

